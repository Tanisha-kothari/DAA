#include <stdio.h>

#define N 4 // Size of the board

int board[N][N];

// Function to check if it's safe to place a queen at position (row, col)
int isSafe(int row, int col) {
    for (int i = 0; i < col; i++) {
        if (board[row][i] == 1) {
            return 0; // Same row
        }
    }
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) {
            return 0; // Upper left diagonal
        }
    }
    for (int i = row, j = col; j >= 0 && i < N; i++, j--) {
        if (board[i][j] == 1) {
            return 0; // Lower left diagonal
        }
    }
    return 1; // Safe
}

// Function to solve the N-Queen problem using backtracking
int solveNQueens(int col) {
    if (col >= N) {
        return 1; // All queens are placed
    }

    for (int i = 0; i < N; i++) {
        if (isSafe(i, col)) {
            board[i][col] = 1; // Place queen
            if (solveNQueens(col + 1)) {
                return 1;
            }
            board[i][col] = 0; // Backtrack
        }
    }
    return 0; // No solution
}

// Function to print the board
void printBoard() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
}

int main() {
    if (solveNQueens(0)) {
        printf("Solution exists: The board is:\n");
        printBoard();
    } else {
        printf("Solution does not exist.\n");
    }
    return 0;
}
